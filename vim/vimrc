" --- Plugins ------------------------------------------------------------------

" Begin
call plug#begin('~/.vim/plugged')

" General
Plug 'scrooloose/nerdtree'
Plug 'vim-scripts/grep.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'alvan/vim-closetag'

" Fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Linter
Plug 'w0rp/ale'

" Formatting
Plug 'sbdchd/neoformat'

" Deoplete
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

" Go
Plug 'fatih/vim-go'

" Syntax
Plug 'sheerun/vim-polyglot'
" Plug 'ap/vim-css-color'
Plug 'RRethy/vim-hexokinase', { 'do': 'make hexokinase' }

" Themes
Plug 'rafalbromirski/vim-aurora'

" Prettier
Plug 'prettier/vim-prettier', {
      \ 'do': 'yarn install',
      \ 'for': [
      \ 'javascript',
      \ 'typescript',
      \ 'css',
      \ 'less',
      \ 'scss',
      \ 'json',
      \ 'graphql',
      \ 'vue',
      \ 'lua',
      \ 'php',
      \ 'python',
      \ 'html' ] }

call plug#end()

" --- General ------------------------------------------------------------------

set shell=zsh
set encoding=utf-8
set termencoding=utf-8
set spelllang=en_gb

set modeline
set modelines=10
set backspace=indent,eol,start
set history=1000
set showcmd
set showmode
set nowrap
set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,*.zip,*.gz,*.bz,*.tar,*.jpg,*.png,*.gif,*.avi,*.wmv,*.ogg,*.mp3,*.mov,*.orig,.pdf,*.DS_Store
set wildignore+=*/.sass-cache/*,*/tmp/*,*/node_modules/*,*/bower_components/*
set clipboard+=unnamed
set number
set ruler
set incsearch
set hlsearch
set ignorecase
set smartcase
set showmatch
set nocursorline
set nocursorcolumn
set scrolljump=5
set linebreak
set showbreak=...
set keymodel=startsel,stopsel
set ttyfast
set listchars=tab:\ \ ,trail:Â·,extends:>,precedes:<
set list
set novisualbell
set noerrorbells
set cinoptions=:0,p0,t0
set cinwords=if,else,while,do,for,switch,case
set formatoptions=tcqr
set foldmethod=manual
set switchbuf=usetab,newtab
set lazyredraw
set vb t_vb=
set synmaxcol=400
set nocompatible
set colorcolumn=120
set t_Co=256

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

" split settings
set splitright
set splitbelow

" hide buffers when not displayed
set hidden
set backup                     " Enable creation of backup file.
set backupdir=~/.vim/backup    " Where backups will go.
set directory=~/.vim/tmp       " Where temporary files will go.
set noswapfile

" indent settings
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
" set autoindent

" mouse settings
set mousehide
set mouse=a
set fo=1

" help W11 - do not show a message when file has been changed
set autoread

" --- GUI ----------------------------------------------------------------------

" Rgrep fix for Mac Os X
let g:Grep_Xargs_Options='-0'

" MacVim config
if has("gui_macvim")
  " Use the normal HIG movements, except for M-Up/Down
  let macvim_skip_cmd_opt_movement = 1
  set guifont=Monaco\ For\ Powerline:h13
  " set macligatures
  " set guifont=Fira\ Code:h14

  " Different cursors for different modes.
  set guicursor=n-c:block-Cursor-blinkon0
  set guicursor+=v:block-vCursor-blinkon0
  set antialias
  set guioptions=A
end

set termguicolors
set background=dark
colorscheme aurora

" --- GUI: statusline ----------------------------------------------------------

" visible statusline
set laststatus=2

" statusline
function! CurrentMode()
  let l:mode = mode()

  if l:mode==#"n"
    return "NORMAL"
  elseif l:mode==?"v"
    return "VISUAL"
  elseif l:mode==#"i"
    return "INSERT"
  elseif l:mode==#"R"
    return "REPLACE"
  endif
endfunction

function! StatuslineMode()
  let l:mode = CurrentMode()

  return '['.l:mode.']'
endfunction

set statusline=
set statusline+=%{StatuslineMode()}
set statusline+=\ %f
set statusline+=%m
set statusline+=%=
set statusline+=\ %y
set statusline+=[%{&fileencoding?&fileencoding:&encoding}]
set statusline+=[%{&fileformat}]

" --- Bindings -----------------------------------------------------------------

" totally annoying default mapping for cap k
nmap K <nop>

" ; => ;
nnoremap ; :

" Better ESC key
imap jk <ESC>

" copy paste
vmap <C-c> y<Esc>i
vmap <C-x> d<Esc>i
imap <C-v> <Esc>pi
imap <C-y> <Esc>ddi
map <C-z> <Esc>
imap <C-z> <Esc>ui

" duplicate current line
nnoremap <D-d> Yp

"f# keys
noremap  <F1> :set invfullscreen<CR>
inoremap <F1> <ESC>:set invfullscreen<CR>a

" shift key fixes
if has("user_commands")
  command! -bang -nargs=? -complete=file E e<bang> <args>
  command! -bang -nargs=? -complete=file W w<bang> <args>
  command! -bang -nargs=? -complete=file Wq wq<bang> <args>
  command! -bang -nargs=? -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>
endif

" yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" moving lines
nnoremap <D-DOWN> :m+<CR>==
nnoremap <D-UP> :m-2<CR>==
inoremap <D-DOWN> <Esc>:m+<CR>==gi
inoremap <D-UP> <Esc>:m-2<CR>==gi
vnoremap <D-DOWN> :m'>+<CR>gv=gv
vnoremap <D-UP> :m-2<CR>gv=gv

" cycle tabs with <CTRL><Left> and <CTRL><Right>
nnoremap <D-Left> :tabprev<CR>
nnoremap <D-Right> :tabnext<CR>

" Navigate between splits <TAB> / <SHIFT+TAB>
nnoremap <Tab> <c-w><c-w>
nnoremap <s-Tab> <c-w><s-w>

nnoremap <D->> :vertical resize +10<CR>
nnoremap <D-<> :vertical resize -10<CR>

" keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" tab only
nnoremap ,o :tabo<CR>

" spellcheck
nnoremap ,s :setlocal spell! spell?<CR>

" eslint fix
nnoremap ,e :ALEFix eslint<CR>

" terminal (vsplit)
nnoremap ,t :vert term<CR>

" set curosrline / column (crosshair)
nnoremap ,c :set cursorline! cursorcolumn!<CR>

" nerdtree
noremap ,d :NERDTreeToggle<cr>
noremap ,f :NERDTreeFind<cr>

" splits
noremap ,v :vsp^<cr>
noremap ,h :split^<cr>

" copy file path to clipboard
noremap ,y :let @+ = expand("%")<CR>

" open vimrc
nnoremap ,1 :edit $MYVIMRC<CR>

" --- Plugins: config ----------------------------------------------------------

" hexokinase
let g:Hexokinase_optInPatterns = 'full_hex,rgb,rgba,hsl,hsla'
let g:Hexokinase_highlighters = ['backgroundfull']

" rgrep
map <leader>f :Rgrep<CR>
let Grep_Skip_Files = '*.bak *~ *tags *.log *.orig *.snap'
let Grep_Skip_Dirs = '.git node_modules'
augroup plugin_rgrep
  autocmd!
  autocmd FileType qf nmap <buffer> <cr> <cr><c-w><c-p>
augroup END

" gitgutter
let g:gitgutter_eager = 0
let g:gitgutter_enabled = 1
let g:gitgutter_max_signs = 1000

augroup plugin_gitgutter
  autocmd!
  autocmd BufWritePost * exe 'GitGutter'
augroup END

" fzf
let g:fzf_preview_window = ''
let g:fzf_layout = { 'down': '~30%' }
noremap ,jj :Files<CR>

" nerdtree
augroup plugin_nerdtree
  autocmd!
  autocmd Filetype nerdtree setlocal nolist
augroup END

let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore = ['\~$', '.*\.pyc$', 'pip-log\.txt$', 'whoosh_index',
      \ 'xapian_index', '.*.pid', 'monitor.py', '.*-fixtures-.*.json',
      \ '.*\.o$', 'db.db', 'tags.bak']

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDChristmasTree = 1
let NERDTreeChDirMode = 2
let NERDTreeMapJumpFirstChild = 'gK'

" vim-closetag
let g:closetag_filenames = "*.html,*.xhtml,*.js"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.js'

" vim-go
let g:go_fmt_command = "goimports"

" deoplete
let g:deoplete#enable_at_startup = 1
inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" ale/linter
" let g:ale_linters = {
"       \  'javascript': ['eslint'],
"       \  'typescript': ['tslint'],
"       \}

" let g:ale_fixers = {
"       \ 'javascript': ['eslint'],
"       \ 'javascript.jsx': ['eslint'],
"       \ 'typescript': ['tslint'],
"       \ 'typescript.tsx': ['tslint'],
"       \ }

" vim-prettier
augroup plugin_prettier
  autocmd!
  autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.vue,*.yaml,*.html Prettier
augroup END

" avoid wrapping a single arrow function param in parens
" avoid|always
" default: 'avoid'
let g:prettier#config#arrow_parens = get(g:,'prettier#config#arrow_parens', 'always')

" --- Editor: utils ------------------------------------------------------------

function! StripTrailingWhitespace()
  " Don't strip on these filetypes
  if &ft =~ 'markdown'
    return
  endif

  %s/\s\+$//e
endfun

augroup editor
  autocmd!
  " remove white space on save
  autocmd BufWritePre * call StripTrailingWhitespace()
  " Reload vimrc on save
  autocmd BufWritePost .vimrc source %
  " Save when losing focus
  autocmd FocusLost * :silent! wall
  " Resize splits when the window is resized
  autocmd VimResized * :wincmd =
augroup END
